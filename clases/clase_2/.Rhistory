install.packages("lubridate")
#install.packages("lubridate")
library(lubridate)
lubridate::as_datetime(tail(celulares$Start.Time))
tail(celulares$Start.Time)
lubridate::as_datetime(tail(celulares$Start.Time))
lubridate::as_datetime(as.numeric(tail(celulares$Start.Time)))
?as_datetime
Sys.timezone(location = TRUE)
as_datetime(as.numeric(tail(celulares$Start.Time)), tz = Sys.timezone(location = TRUE))
as_datetime(as.numeric(tail(celulares$Start.Time)), tz = Sys.timezone(location = TRUE), format = "%m/%d/%Y %H:%M")
as_datetime(as.numeric(tail(celulares$Start.Time)), tz = Sys.timezone(location = TRUE), format = "%m/%d/%Y %H:%M")
as_datetime((tail(celulares$Start.Time)), tz = Sys.timezone(location = TRUE), format = "%m/%d/%Y %H:%M")
as_datetime(as.numeric(tail(celulares$Start.Time)), tz = Sys.timezone(location = TRUE), format = "%m/%d/%Y %H:%M")
as_date(as_datetime(as.numeric(tail(celulares$Start.Time)), tz = Sys.timezone(location = TRUE)), format = "%m/%d/%Y %H:%M")
as_date(as_datetime(as.numeric(tail(celulares$Start.Time)), tz = Sys.timezone(location = TRUE)))
lubridate::as_datetime(as.numeric(tail(celulares$Start.Time)), tz = Sys.timezone(location = TRUE), format = "%m/%d/%Y %H:%M")
a <- as_datetime(as.numeric(tail(celulares$Start.Time)), tz = Sys.timezone(location = TRUE))
a
a <- ymd_hms(as_datetime(as.numeric(tail(celulares$Start.Time)), tz = Sys.timezone(location = TRUE)))
a
a <- as.Date(as_datetime(as.numeric(tail(celulares$Start.Time)), tz = Sys.timezone(location = TRUE)))
a
a <- as.Date(as_datetime(as.numeric(tail(celulares$Start.Time)), tz = Sys.timezone(location = TRUE)), format = "%m/%d/%Y %H:%M")
a
as_datetime(as.numeric(tail(celulares$Start.Time)), tz = Sys.timezone(location = TRUE))
as_datetime(as.numeric(tail(celulares$Start.Time)))
as.Date(as_datetime(as.numeric(tail(celulares$Start.Time))), format = "%m/%d/%Y %H:%M")
a <- format(as_datetime(as.numeric(tail(celulares$Start.Time))), format = "%m/%d/%Y %H:%M")
a
a <- format(as_datetime(as.numeric(tail(celulares$Start.Time))), format = "%b/%d/%Y %H:%M")
a
format("2019-4-14 08:00", format = "%b/%d/%Y %H:%M")
format("2019-4-14 08:00", "%b/%d/%Y %H:%M")
as.Date("2019-4-14 08:00")
format(as_datetime(as.numeric(tail(celulares$Start.Time))), format = "%b/%d/%Y %H:%M")
format(as_datetime(as.numeric(tail(celulares$Start.Time))), format = "%M/%d/%Y %H:%M")
format(as_datetime(as.numeric(tail(celulares$Start.Time))), format = "%m/%d/%Y %H:%M")
format(as_datetime(as.numeric(tail(celulares$Start.Time, 10))), format = "%m/%d/%Y %H:%M")
format(as_datetime(as.numeric(tail(celulares$Start.Time, 100))), format = "%m/%d/%Y %H:%M")
as_datetime(celulares$Start.Time)
a<-apply(celulares, 1, function(d){
d <- d[1]
if(grep("/", d)){
return(T)
}
})
a<-apply(celulares, 1, function(d){
a<-apply(celulares, 1, function(d){
d <- d[1]
if(length(grep("/", d)) > 0){
return(T)
}
})
a<-apply(celulares, 1, function(d){
d <- d[1]
if(length(grep("/", d)) > 0){
return(T)
}
})
dim(celulares)
a<-sapply(celulares$Start.Time, function(d){
d <- d[1]
if(length(grep("/", d)) > 0){
return(T)
}
})
grep("/", celulares$Start.Time)
#Buscamos los que tengan la fecha en formato fecha pero les ponemos un formato correcto
conFormatoFecha <- which(grep("/", celulares$Start.Time))
#Buscamos los que tengan la fecha en formato fecha pero les ponemos un formato correcto
conFormatoFecha <- grep("/", celulares$Start.Time)
conFormatoFecha
celulares$Start.Time[conFormatoFecha]
strsplit(" ", celulares$Start.Time[conFormatoFecha], fixed = T)
strsplit
#Buscamos los que tengan la fecha en formato fecha pero les ponemos un formato correcto
conFormatoFechaIds <- grep("/", celulares$Start.Time)
conFormatoFecha <- strsplit(celulares$Start.Time[conFormatoFechaIds], " ", fixed = T)
conFormatoFecha
s <- conFormatoFecha[1]
s
s <- conFormatoFecha[[1]]
s
s <- s[1]
s
s <- strsplit(s, "/", fixed = T)
s
format(s[[1]][1], digits = 2)
format(s[[1]][1], digits = 3)
format(as.numeric(s[[1]][1]), digits = 3)
as.numeric(s[[1]][1])
format(as.numeric(s[[1]][1]), zero.print = T)
format(as.numeric(s[[1]][1]), zero.print = T, digits = 3)
sprintf("%03d", as.numeric(s[[1]][1]))
sprintf("%03d",(s[[1]][1]))
sprintf("%03d/%03d/%04d", as.numeric(s[[1]]))
as.numeric(s[[1]])
s <- as.numeric(s[[1]])
sprintf("%03d/%03d/%04d", s[1], s[2], s[3])
sprintf("%02d/%02d/%04d", s[1], s[2], s[3])
sprintf("%02d/%02d/%04d %02d:%02d", s[1], s[2], s[3], hora[1], hora[2])
fecha <- as.numeric(s[[1]])
hora  <- as.numeric(s[[2]])
sprintf("%02d/%02d/%04d %02d:%02d", s[1], s[2], s[3], hora[1], hora[2])
s <- conFormatoFecha[[1]]
s
s <- strsplit(s, "/", fixed = T)
s
fecha <- strsplit(s[1], "/", fixed = T)
fecha <- strsplit(s[[1]], "/", fixed = T)
fecha
s[[1]]
s <- conFormatoFecha[[1]]
s
fecha <- strsplit(s[1], "/", fixed = T)
fecha
fecha <- as.numeric(fecha[[1]])
fecha
hora <- strsplit(s[2], ":", fixed = T)
hora
hora  <- as.numeric(hora[[2]])
hora  <- as.numeric(hora[[2]])
hora
hora  <- as.numeric(hora[[1]])
hora
sprintf("%02d/%02d/%04d %02d:%02d", s[1], s[2], s[3], hora[1], hora[2])
fecha <- strsplit(s[1], "/", fixed = T)
hora  <- strsplit(s[2], ":", fixed = T)
fecha <- as.numeric(fecha[[1]])
hora  <- as.numeric(hora[[1]])
sprintf("%02d/%02d/%04d %02d:%02d", s[1], s[2], s[3], hora[1], hora[2])
hora[1]
hora[2]
s[1]
sprintf("%02d/%02d/%04d %02d:%02d", fecha[1], fecha[2], fecha[3], hora[1], hora[2])
fecha_hora <- sprintf("%02d/%02d/%04d %02d:%02d", fecha[1], fecha[2], fecha[3], hora[1], hora[2])
fechas <- unlist(lapply(conFormatoFecha, function(s){
fecha <- strsplit(s[1], "/", fixed = T)
hora  <- strsplit(s[2], ":", fixed = T)
fecha <- as.numeric(fecha[[1]])
hora  <- as.numeric(hora[[1]])
#fecha_hora <- sprintf("%02d/%02d/%04d %02d:%02d", fecha[1], fecha[2], fecha[3], hora[1], hora[2])
fecha_hora <- sprintf("%04d-%02d-%04d %02d:%02d", fecha[3], fecha[1], fecha[2], hora[1], hora[2])
return(fecha_hora)
}))
fechas
fechas <- unlist(lapply(conFormatoFecha, function(s){
fecha <- strsplit(s[1], "/", fixed = T)
hora  <- strsplit(s[2], ":", fixed = T)
fecha <- as.numeric(fecha[[1]])
hora  <- as.numeric(hora[[1]])
#fecha_hora <- sprintf("%02d/%02d/%04d %02d:%02d", fecha[1], fecha[2], fecha[3], hora[1], hora[2])
fecha_hora <- sprintf("%04d-%02d-%02d %02d:%02d", fecha[3], fecha[1], fecha[2], hora[1], hora[2])
return(fecha_hora)
}))
fechas
celulares$Start.Time[conFormatoFechaIds] <- fechas
format(as_datetime(as.numeric(tail(celulares$Start.Time[-conFormatoFechaIds], 100))), format = "%Y-%m-%d %H:%M")
format(as_datetime(as.numeric(celulares$Start.Time[-conFormatoFechaIds]))), format = "%Y-%m-%d %H:%M")
format(as_datetime(as.numeric(celulares$Start.Time[-conFormatoFechaIds])), format = "%Y-%m-%d %H:%M")
sinFormatoFechaIds <- setdiff(seq_along(celulares$Start.Time), conFormatoFechaIds)
sinFormatoFechaIds
format(as_datetime(as.numeric(celulares$Start.Time[sinFormatoFechaIds])), format = "%Y-%m-%d %H:%M")
sinFormatoFechaIds[1]
celulares$Start.Time[10559]
sinFormatoFechaIds <- setdiff(seq_along(celulares$Start.Time), conFormatoFechaIds)
format(as_datetime(as.numeric(celulares$Start.Time[sinFormatoFechaIds])), format = "%Y-%m-%d %H:%M")
sinFormatoFechaIds                       <- setdiff(seq_along(celulares$Start.Time), conFormatoFechaIds)
celulares$Start.Time[sinFormatoFechaIds] <- format(as_datetime(as.numeric(celulares$Start.Time[sinFormatoFechaIds])), format = "%Y-%m-%d %H:%M")
table(is.na(celulares$Start.Time))
celulares <- read.csv("~/Downloads/celulares.csv", header = T, colClasses = rep("character", 11))
conFormatoFechaIds <- grep("/", celulares$Start.Time)
conFormatoFecha <- strsplit(celulares$Start.Time[conFormatoFechaIds], " ", fixed = T)
fechas <- unlist(lapply(conFormatoFecha, function(s){
fecha <- strsplit(s[1], "/", fixed = T)
hora  <- strsplit(s[2], ":", fixed = T)
fecha <- as.numeric(fecha[[1]])
hora  <- as.numeric(hora[[1]])
#fecha_hora <- sprintf("%02d/%02d/%04d %02d:%02d", fecha[1], fecha[2], fecha[3], hora[1], hora[2])
fecha_hora <- sprintf("%04d-%02d-%02d %02d:%02d:00", fecha[3], fecha[1], fecha[2], hora[1], hora[2])
return(fecha_hora)
}))
celulares$Start.Time[conFormatoFechaIds] <- fechas
fechas
sinFormatoFechaIds                       <- setdiff(seq_along(celulares$Start.Time), conFormatoFechaIds)
celulares$Start.Time[sinFormatoFechaIds] <- format(as_datetime(as.numeric(celulares$Start.Time[sinFormatoFechaIds])), format = "%Y-%m-%d %H:%M:00")
table(is.na(celulares$Start.Time))
celulares$Start.Time
write.csv("~/Downloads/celulares_con_fecha.csv", sep = ",", col.names = T, row.names = F, quote = F)
write.csv("~/Downloads/celulares_con_fecha.csv", header = T, row.names = F, quote = F)
write.csv("~/Downloads/celulares_con_fecha.csv", col.names = T, row.names = F, quote = F)
write.table("~/Downloads/celulares_con_fecha.csv", sep = ",", col.names = T, row.names = F, quote = F)
write.table(celulares, "~/Downloads/celulares_con_fecha.csv", sep = ",", col.names = T, row.names = F, quote = F)
celulares <- read.csv("~/Downloads/celulares_con_fecha.csv", header = T, colClasses = rep("character", 11))
head(celulares)
table(is.na(celulares$Start.Time))
install.packages("BiocManager")
library(BiocManager)
BiocManager::install("ASpli")
r1 <- c(1, 3, 5, 72, 23, 56, 2, 12, 5, 8)
r2 <- c(13, 34, 52, 12, 33, 76, 52, 32, 15, 28)
r1 + r2
r1 * r2
r1 / r2
r1 / r2
for(i in 1:10){
i
}
for(i in 1:10){
print(i)
}
r1 / r2
?c
?sort
sort(r1)
r1
sort(r1)
r1
r1 <- c(1, 3, 5, 72, 23, 56, 2, 12, 5, 8)
r1 <- c(1, 3, 5, 72, 23, 56, 2, 12, 5, 8)
r1
#esto es un comentario
sort(x, decreasing = FALSE)
#esto es un comentario
sort(r1, decreasing = FALSE)
#esto es un comentario
sort(r1, decreasing = TRUE)
#esto es un comentario
sort(r1)
length(r1)
c(r1, 9)
r1 <- c(r1, 9)
r1
length(r1)
r1[3]
r1[3] <- 10
r1
r1[3]
fp <- c("Sirus", "CFP", "GFP")
fp
fp <- c("Sirus", "CFP", "GFP", "Citrina")
fp
nm <- c(45, 324, 6545, 23)
nm
?cbind
m_fp <- cbind(fp, nm)
m_fp
class(m_fp)
c("a", "b", 1)
matrix(c(fp, nm), nrow=4)
?matrix
matrix(c(fp, nm), nrow=4, byrow = TRUE)
c(fp, nm)
matrix(data = c(fp, nm), nrow=4, byrow = FALSE)
df_fp <- data.frame(fp, nm)
df_fp
class(df_fp)
df_fp <- data.frame(fp, nm, stringsAsFactors = F)
df_fp
df_fp <- data.frame(fp, nm)
1:10
vec9 <- seq(1:9, by = 2)
?seq
1:9
seq(from = 1, to = 9, by = 2)
?matrix
m <- matrix(0, nrow = 3, ncol = 3, byrow = FALSE)
m
m <- matrix(1:9, nrow = 3, ncol = 3, byrow = FALSE)
m
m <- matrix(1:9, nrow = 3, ncol = 3, byrow = TRUE)
m
datasets::airquality
air <- datasets::airquality
head(air)
tail(air)
?head
head(air, n = 10)
r1
r1 + NA
air$Temp
air[, "Temp"]
air[, 4]
air[3, 4]
air[3, "Temp"]
air$Temp[3]
air[1:10, ]
air[1:10, 2:3]
1:10
c(1, 5)
air[c(1, 5), 2:3]
air$Solar.R
?which.min
air[, "Solar.R"]
class(air[, "Solar.R"])
which.min(air[, "Solar.R"])
air[82, ]
air[82, "Day"]
air[which.min(air[, "Solar.R"]), "Day"]
air[which.min(air[, "Solar.R"]), c("Month", "Day")]
which.min(c(2, 3, 3, 2, 5))
min(air[, "Solar.R"])
?min
min(air[, "Solar.R"], na.rm = TRUE)
"asdasd"
"asdasd
ssd
"
[
""[(]
"
knitr::opts_chunk$set(echo = TRUE)
BiocManager::install("Biostring")
BiocManager::install("Biostrings")
3*3*3*3
1:100
1:100
seq(1, 100, by = 1)
suma <- 0
suma
suma <- 0
for(i in 1:100){
suma <- suma + i
}
suma
suma <- 0
for(i in 1:100){
print(suma)
suma <- suma + i
}
suma <- 0
for(i in 1:100){
suma <- suma + i
print(suma)
}
producto <- 1
for(i in 1:4){
producto <- producto*3
print(producto)
}
producto <- 1
for(i in 1:5){
producto <- producto*10
print(producto)
}
for(i in 1:100){
print(i)
}
3 %% 2
4 %% 2
5 %% 2
4 %% 2 == 0
5 %% 2 == 0
for(i in 1:100){
if(i %% 2 == 0){
print(i)
}
}
for(i in 1:100){
if(i %% 2 != 0){
print(i)
}
}
for(i in 1:100){
if(i %% 2 == 1){
print(i)
}
}
(i %% 2 == 0)
for(i in 1:100){
if((i %% 2 == 0) == FALSE){
print(i)
}
}
class(3 %% 2 == 0)
"
"hola
chau
"
(
][][]["#]$["#]$["#]$["#$]
1
1
paste("A", "B")
paste("A", "B", 1)
paste("A", "B", 1, sep = "-")
?paste
?for
for <- 2
?print
?DNAstring
?DNAString
"a" + 1
x<-3
x*2
x <- 23
x*2
"x"*2
for(i in 1:100){
if((i %% 2 == 0) == FALSE){
print(i)
}
}
for(i in 1:100){
if((i %% 2 == 0) == FALSE){
print(i)
}else{
print(i)
}
}
for(i in 1:100){
if((i %% 2 == 0) == FALSE){
print(paste(i, "i"))
}else{
print(paste(i, "p"))
}
}
for(i in 1:100){
if((i %% 2 == 0) == FALSE){
salida <- paste(i, "i")
}else{
salida <- paste(i, "p")
}
print(salida)
}
-10:10
seq(-10, 10)
seq(from = -10, to = 10)
?seq
seq(from = -10, to = 10, length.out = 5)
for(i in -10:10){
if(i %% 2 == 0 & i != 0){
salida <- paste(i, "p")
}else if(i %% 2 == 1){
salida <- paste(i, "i")
}else{
salida <- paste(i, "o")
}
print(salida)
}
m <- matrix(0, nrow = 5, ncol = 10)
m
m[1, 1]
m[1, 1] <- 2
m
m[1, 2] <- 1 + 2
m
m[5, 9] <- 5 + 9
m[5, 10] <- 5 + 10
m
for(i in seq(1, 10)){
m[1, i] <- 1 + i
}
m
for(j in 1:5){
for(i in seq(1, 10)){
m[j, i] <- j + i
}
}
m
numero_al_azar <- sample(1:100, 1) #Le pido a la compu que saque un numero al azar entre 1 y 100
for(intento in 1:20){ #Le doy al jugador un máximo de 20 intentos
numero_usuario <- as.numeric(readline(paste("Ingresá un número (intento", intento, "): "))) #Le pido al jugador que ingrese un número
if(numero_usuario == numero_al_azar){ #Gano! Tengo que salir del for, no quiero seguir preguntándole
print("¡Crack, ganaste!")
print(paste("Usaste", intento, "intentos"))
break #Con break salimos del for antes de que terminen los 20 intentos
}else if (numero_usuario > numero_al_azar){ #Eligió un número muy grande
print("Elegiste un número muy grande")
}else{ #Eligió un número muy chico
print("Elegiste un número muy chico")
}
if(intento == 20){ #Si intento vale 20 es porque llegó hasta el final, hay que decirle que perdió
print("Uh, le pifiaste 20 veces, perdiste!!")
}
}
getwd()
setwd("~/trabajo/cursos/analisis_de_datos_con_r_marzo_2021/clases/clase_2")
getwd()
#10) Importar el dataset “antropometria”.
antropometria <- read.csv("/home/andy/trabajo/cursos/analisis_de_datos_con_r_marzo_2021/clases/clase_2/antropometria.csv") #Acá tenés que completar con la ruta completa a donde tengas el archivo
antropometria <- read.csv("~/trabajo/cursos/analisis_de_datos_con_r_marzo_2021/clases/clase_2/antropometria.csv", stringsAsFactors=FALSE)
View(antropometria)
antropometria
#10) Importar el dataset “antropometria”.
antropometria <- read.csv("/home/andy/trabajo/cursos/analisis_de_datos_con_r_marzo_2021/clases/clase_2/antropometria.csv", stringsAsFactors = FALSE) #Acá tenés que completar con la ruta completa a donde tengas el archivo
#¿Cuántas filas y columnas contiene el data.frame?
nrow(antropometria)
ncol(antropometria)
#¿Qué tipo de datos tiene cada columna?
str(antropometria)
head(antropometria)
tail(antropometria)
View(antropometria)
#¿Existen elementos con NA? ¿Cuántos?
completos <- complete.cases(antropometria)
length(completos)
completos #Imprimo el vector para ver qué tipo de datos me devuelve complete.cases. (spoiler, es un vector de TRUE y FALSE donde TRUE es una fila que no tiene NA, es decir, es un caso completo)
completos[28, ]
antropometria[28, ]
table(completos) #Hay 28 elementos con NA
#Generar una nueva tabla removiendo todas las filas con algún NA
antropometria_filtrado <- antropometria[completos, ]
head(antropometria_filtrado)
#Veamos si hay algún na. Podemos hacerlo de varias maneras, con complete.cases como antes, o usando is.na y any. is.na se fija cada elemento del data frame
#y any se fija si alguno de esos es TRUE
is.na(antropometria_filtrado) #A diferencia de complete.cases que devuelve TRUE o FALSE por fila, is.na se fija celda por celda y devuelve por celda.
is.na(antropometria)
any(is.na(antropometria_filtrado)) #Any se fija si alguna de todas las celdas es TRUE. Si todas son FALSE, devuelve FALSE
#y exportarla a un nuevo csv llamado antropometria_filtrado.csv
write.csv(antropometria_filtrado, file = "antropometria_filtrado.csv", quote = F, row.names = F) #write.csv tiene muchas opciones, estas son las más comunes para mantener compatibilidad con otros programas, por ejemplo, excel
