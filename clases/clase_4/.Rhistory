#Cargamos los datos
plantas <- datasets::PlantGrowth
#Veamos como se distribuyen las plantas dentro de cada grupo
boxplot(weight ~ group, data = plantas)
bartlett.test(list(plantas$weight[plantas$group == "ctrl"], lantas$weight[plantas$group == "trt1"]))
bartlett.test(list(plantas$weight[plantas$group == "ctrl"], plantas$weight[plantas$group == "trt1"]))
bartlett.test(rnorm(10), rnorm(10))
bartlett.test(list(rnorm(10), rnorm(10)))
bartlett.test(list(rnorm(100, mean = 0, sd = 10), rnorm(100, mean = 0, sd = 10)))
bartlett.test(list(rnorm(100, mean = 0, sd = 10), rnorm(100, mean = 0, sd = 20)))
#Para testear que las dos varianzas sean iguales (homogeneidad de varianzas) podemos usar el test de bartlett.
bartlett.test(list(plantas$weight[plantas$group == "ctrl"], plantas$weight[plantas$group == "trt1"]))
bartlett.test(list(plantas$weight[plantas$group == "ctrl"], plantas$weight[plantas$group == "trt2"]))
#Para testear que las dos varianzas sean iguales (homogeneidad de varianzas) podemos usar el test de bartlett.
bartlett.test(list(plantas$weight[plantas$group == "ctrl"], plantas$weight[plantas$group == "trt1"]))
bartlett.test(list(plantas$weight[plantas$group == "ctrl"], plantas$weight[plantas$group == "trt2"]))
bartlett.test(list(sueno$extra[sueno$group == 1], sueno$extra[sueno$group == 2]))
sueno <- datasets::sleep
shapiro.test(sueno$extra[sueno$group == 1])
shapiro.test(sueno$extra[sueno$group == 2])
bartlett.test(list(sueno$extra[sueno$group == 1], sueno$extra[sueno$group == 2]))
#Veamos outliers
boxplot(alturasHolanda)
#Tomamos una muestra de la altura de personas en Holanda y queremos saber si la altura de esas personas es significativamente diferente de la
#media mundial. Usamos un t Test de una muestra. El t Test require que los datos sean continuos, independientes, aproximadamente normales y sin outliers
#(aunque es bastante robusto si esto no se cumple del todo).
alturasHolanda <- c(182, 184, 182, 179, 181, 179, 182, 181, 182, 181)
#Veamos outliers
boxplot(alturasHolanda)
#Tomamos una muestra de la altura de personas en Holanda y queremos saber si la altura de esas personas es significativamente diferente de la
#media mundial. Usamos un t Test de una muestra. El t Test require que los datos sean continuos, independientes, aproximadamente normales y sin outliers
#(aunque es bastante robusto si esto no se cumple del todo).
alturasHolanda <- c(182, 184, 182, 180, 181, 179, 182, 181, 182, 181)
#Veamos outliers
boxplot(alturasHolanda)
#Tomamos una muestra de la altura de personas en Holanda y queremos saber si la altura de esas personas es significativamente diferente de la
#media mundial. Usamos un t Test de una muestra. El t Test require que los datos sean continuos, independientes, aproximadamente normales y sin outliers
#(aunque es bastante robusto si esto no se cumple del todo).
alturasHolanda <- c(182, 184, 182, 180, 181, 180, 182, 181, 182, 181)
#Veamos outliers
boxplot(alturasHolanda)
#Tomamos una muestra de la altura de personas en Holanda y queremos saber si la altura de esas personas es significativamente diferente de la
#media mundial. Usamos un t Test de una muestra. El t Test require que los datos sean continuos, independientes, aproximadamente normales y sin outliers
#(aunque es bastante robusto si esto no se cumple del todo).
alturasHolanda <- c(182, 183, 182, 180, 181, 180, 182, 181, 182, 181)
#Veamos outliers
boxplot(alturasHolanda)
#H0: Los datos son normales
#H1: Los datos no son normales
shapiro.test(alturasHolanda)
#Cumplen normalidad, podemos usar t Test. Pero antes, elijamos un nivel de significancia (usualmente 0.05)
#H0: alturaMedia = 175
#H1: alturaMedia != 175
?t.test
t.test(alturasHolanda, mu = 175)
t.test(alturasHolanda, mu = 175)
#Veamos como se distribuyen las plantas dentro de cada grupo
boxplot(weight ~ group, data = plantas)
bartlett.test(list(cd4$baseline, cd4$oneyear))
cd4 <- boot::cd4
shapiro.test(cd4$baseline)
shapiro.test(cd4$oneyear)
bartlett.test(list(cd4$baseline, cd4$oneyear))
bartlett.test(list(iris$Petal.Length[iris$Species == "setosa"], iris$Sepal.Length[iris$Species == "versicolor"]))
bartlett.test(list(iris$Petal.Length[iris$Species == "virginica"], iris$Sepal.Length[iris$Species == "versicolor"]))
t.test(iris$Sepal.Length[iris$Species == "versicolor"], iris$Sepal.Length[iris$Species == "virginica"])
t.test(iris$Petal.Length[iris$Species == "setosa"], mu = 1.5, var.equal = T)
t.test(iris$Petal.Length[iris$Species == "setosa"], mu = 1.5, var.equal = F)
#¿Qué pasa si nuestros datos no cumplen homogeneidad de varianza?
#Veamos los datos de iris
View(iris)
bartlett.test(list(iris$Sepal.Length[iris$Species == "setosa"], iris$Sepal.Length[iris$Species == "versicolor"]))
#
bartlett.test(list(iris$Sepal.Length[iris$Species == "setosa"], iris$Sepal.Length[iris$Species == "versicolor"]))
#Comparamos setosa con versicolor en el
bartlett.test(list(iris$Petal.Width[iris$Species == "setosa"], iris$Petal.Width[iris$Species == "versicolor"]))
#Comparamos setosa con versicolor en el ancho del pétalo
bartlett.test(list(iris$Petal.Width[iris$Species == "setosa"], iris$Petal.Width[iris$Species == "versicolor"]))
shapiro.test(iris$Petal.Width[iris$Species == "setosa"])
shapiro.test(iris$Petal.Width[iris$Species == "versicolor"])
shapiro.test(iris$Setal.Width[iris$Species == "versicolor"])
shapiro.test(iris$Sepal.Width[iris$Species == "versicolor"])
shapiro.test(iris$Sepal.Width[iris$Species == "setosa"])
#Comparamos setosa con versicolor en el ancho del pétalo
bartlett.test(list(iris$Sepal.Width[iris$Species == "setosa"], iris$Sepal.Width[iris$Species == "versicolor"]))
shapiro.test(iris$Sepal.Length[iris$Species == "versicolor"])
shapiro.test(iris$Sepal.Length[iris$Species == "setosa"])
#Comparamos setosa con versicolor en el ancho del pétalo
bartlett.test(list(iris$Sepal.Length[iris$Species == "setosa"], iris$Sepal.Length[iris$Species == "versicolor"]))
#Comparamos setosa con versicolor en el ancho del pétalo
bartlett.test(list(iris$Sepal.Length[iris$Species == "setosa"], iris$Sepal.Length[iris$Species == "virginica"]))
shapiro.test(iris$Sepal.Length[iris$Species == "virginica"])
#Comparamos setosa con versicolor en el largo del sépalo
shapiro.test(iris$Sepal.Length[iris$Species == "setosa"])
shapiro.test(iris$Sepal.Length[iris$Species == "versicolor"])
#Veamos si cumplen homogeneidad de varianza
bartlett.test(list(iris$Sepal.Length[iris$Species == "setosa"], iris$Sepal.Length[iris$Species == "versicolor"]))
?t.test
welch.test(Sepal.Length ~ Species, data = iris)
install.packages("onewaytests")
library(onewaytests)
welch.test(Sepal.Length ~ Species, data = iris)
welch.test(Sepal.Length ~ Species, data = iris[iris$Species %in% c("versicolor", "virginica"), ])
t.test(iris$Sepal.Length[iris$Species == "versicolor"], iris$Sepal.Length[iris$Species == "virginica"])
t.test(iris$Sepal.Length[iris$Species == "versicolor"], iris$Sepal.Length[iris$Species == "virginica"], var.equal = F)
#Ups! Qué podemos hacer? Usar el test de welch (v)
t.test(iris$Sepal.Length[iris$Species == "versicolor"], iris$Sepal.Length[iris$Species == "virginica"], var.equal = T)
#Ups! Qué podemos hacer? Usar el test de welch (v)
t.test(iris$Sepal.Length[iris$Species == "versicolor"], iris$Sepal.Length[iris$Species == "virginica"], var.equal = t)
#Ups! Qué podemos hacer? Usar el test de welch (v)
t.test(iris$Sepal.Length[iris$Species == "versicolor"], iris$Sepal.Length[iris$Species == "virginica"], var.equal = F)
#Veamos si cumplen homogeneidad de varianza
bartlett.test(list(iris$Sepal.Length[iris$Species == "versicolor"], iris$Sepal.Length[iris$Species == "versicolor"]))
#Veamos si cumplen homogeneidad de varianza
bartlett.test(list(iris$Sepal.Length[iris$Species == "versicolor"], iris$Sepal.Length[iris$Species == "virginica"]))
#Ups! Qué podemos hacer? Usar el test de welch
t.test(iris$Sepal.Length[iris$Species == "setosa"], iris$Sepal.Length[iris$Species == "versicolor"], var.equal = F)
#Veamos si cumplen homogeneidad de varianza
bartlett.test(list(iris$Sepal.Length[iris$Species == "setosa"], iris$Sepal.Length[iris$Species == "versicolor"]))
#Ups! Qué podemos hacer? Usar el test de welch
t.test(iris$Sepal.Length[iris$Species == "setosa"], iris$Sepal.Length[iris$Species == "versicolor"], var.equal = F)
#Veamos si cumplen homogeneidad de varianza
bartlett.test(list(iris$Sepal.Length[iris$Species == "setosa"], iris$Sepal.Length[iris$Species == "virginica"]))
#a)
dbinom(5, size = 10, prob = 0.5)
#a)
#dbinom nos da la probabilidad de que salgan exactamente x caras en size tiradas, con la probabilidad de que salga cara prob
dbinom(x = 5, size = 10, prob = 0.5) #Una moneda justa
dbinom(x = 5, size = 10, prob = 0.75) #Una moneda cargada
#b)
#Usamos lo que vimos en a), con x = 20, size = 50 y prob = 0.25 para obtener exactamente la probabilidad
dbinom(x = 20, size = 50, prob = 0.25)
#Podemos sumar la probabilidad con x = 0, 1, 2...20, size = 50 y prob = 0.25 para obtener la probabilidad de 20 A o menos
dbinom(x = 0:20, size = 50, prob = 0.25)
#Podemos sumar la probabilidad con x = 0, 1, 2...20, size = 50 y prob = 0.25 para obtener la probabilidad de 20 A o menos
sum(dbinom(x = 0:20, size = 50, prob = 0.25))
#O podemos usar pbinom, que nos dice exactamente eso, la probabilidad de que salga q o menos
pbinom(q = 20, size = 50, prob = 0.25)
probabilidad <- dbinom(x, size = 50, prob = 0.25)
#c)
#generamos el vector de x
x <- 0:20
probabilidad <- dbinom(x, size = 50, prob = 0.25)
plot(x, probabilidad)
#c)
#generamos el vector de x
x <- 0:50
probabilidad <- dbinom(x, size = 50, prob = 0.25)
plot(x, probabilidad)
#d)
#Armamos una función para devuelve una secuencia al azar. Recordar el replace = T
generarSecuencia <- function(){
bases <- c("A", "C", "G", "T")
return(sample(bases, 50, replace = T)))
})
#d)
#Armamos una función para devuelve una secuencia al azar. Recordar el replace = T
generarSecuencia <- function(){
bases <- c("A", "C", "G", "T")
return(sample(bases, 50, replace = T))
}
generarSecuencia
generarSecuencia()
#d)
#Iniciamos el generador de números aleatorios
set.seed(123457)
#Armamos una función para devuelve una secuencia al azar. Recordar el replace = T
generarSecuencia <- function(){
bases <- c("A", "C", "G", "T")
return(sample(bases, 50, replace = T))
}
#Usamos replicate para correr 10000 veces la función que genera las secuencias
secuencias <- replicate(n = 10000, generarSecuencia())
#Tenemos que transponer para obtener las secuencias en filas (formato largo) en lugar de en columnas (formato ancho)
secuencias <- t(secuencias)
head(secuencias)
#Contamos cuantas veces salió A con rowSums y recordanto que R puede sumar TRUE (1) y FALSE (0)
total <- rowSums(secuencias == "A")
total
#Dice que grafiquemos un histograma supuerpuesto al gráfico del punto 2 (es un typo, debería decir punto c)
hist(total, add = T, freq = F)
#e)
unif <- runif(n = 100000, min = 0, max = 10)
hist(uniof
hist(unif)
#e)
unif <- runif(n = 100000, min = 0, max = 10)
hist(unif)
#Elegimos un p, por ejemplo, p = 6
p <- 6
sum(unif < p)/length(p)
sum(unif < p)
sum(unif < p)/length(unif)
#e)
unif <- runif(n = 100000, min = 0, max = 1)
hist(unif)
#Elegimos un p, por ejemplo, p = 0.6
p <- 0.6
sum(unif < p)/length(unif)
#f)
norm <- rnorm(n = 10000, mean = 1, sd = 2)
mean(norm)
sd(norm)
hist(norm)
#g)
norm <- rnorm(n = 100000, mean = 1, sd = 2)
mean(norm)
sd(norm)
hist(norm)
#h)
#Cargamos el dataset antropometria
antropometria <- read.csv("../clase_3/datasets/antropometria.csv", stringsAsFactors=FALSE)
adultosVarones <- antropometria[antropometria$sex == "M" & antropometria$age > 20, ]
hist(adultosVarones$height)
x <- seq(140, 190, by = 1)
media <- mean(adultosVarones$height)
desvio <- sd(adultosVarones$height)
y <- dnorm(x, mean = media, sd = desvio)
lines(x, y)
x
y
media
media <- mean(adultosVarones$height, na.rm = T)
desvio <- sd(adultosVarones$height, na.rm = T)
x <- seq(140, 190, by = 1)
y <- dnorm(x, mean = media, sd = desvio)
lines(x, y)
y
x
hist(adultosVarones$height, freq = F)
media <- mean(adultosVarones$height, na.rm = T)
desvio <- sd(adultosVarones$height, na.rm = T)
x <- seq(140, 190, by = 1)
y <- dnorm(x, mean = media, sd = desvio)
lines(x, y)
#2) Test de hipótesis
sleep <- datasets::sleep
head(sleep)
boxplot(extra ~ group, sleep)
#Veamos si vale normalidad e igualdad de varianza
shapiro.test(sleep$extra)
#Veamos si vale normalidad e igualdad de varianza
shapiro.test(sleep$extra[sleep$group == 1])
shapiro.test(sleep$extra[sleep$group == 2])
#Parece que son normales, veamos varianza
bartlett.test(sleep$extra[sleep$group == 1])
#Parece que son normales, veamos varianza. Recordar para el bartlett test que necesitamos pasarle una list con cada grupo.
grupos <- list(sleep$extra[sleep$group == 1], sleep$extra[sleep$group == 2])
bartlett.test(grupos)
#Vale igualdad de varianza, hagamos el t-test pariado (paired = T)
t.test(sleep$extra[sleep$group == 1], sleep$extra[sleep$group == 2], var.equal = T, paired = T)
head(cd4)#Veamos de qué se trata el dataset
#b)
cd4 <- boot::cd4
head(cd4)#Veamos de qué se trata el dataset
boxplot(cd4$baseline, cd4$oneyear) #Son bastante diferentes ambos grupos. Hay que tener en cuenta que se trata de muestras pareadas.
#Veamos si vale normalidad e igualdad de varianza
shapiro.test()
#Veamos si vale normalidad e igualdad de varianza
shapiro.test(cd4$baseline)
shapiro.test(cd4$oneyear)
#Parece que son normales, veamos varianza. Recordar para el bartlett test que necesitamos pasarle una list con cada grupo.
grupos <- list(sleep$extra[sleep$group == 1], sleep$extra[sleep$group == 2])
#Parece que son normales, veamos varianza. Recordar para el bartlett test que necesitamos pasarle una list con cada grupo.
grupos <- list(cd4$baseline, cd4$oneyear)
bartlett.test(grupos)
#Vale igualdad de varianza, hagamos el t-test pariado (paired = T)
t.test(cd4$baseline, cd4$oneyear, var.equal = T, paired = T)
#c)
iris
#c)
#Para cargar iris no hace falta maś que usarlo
iris
#c)
#Para cargar iris no hace falta maś que usarlo
head(iris9
#c)
#Para cargar iris no hace falta maś que usarlo, viene precargado en un data.frame que se llama iris
head(iris)
#c)
#Para cargar iris no hace falta maś que usarlo, viene precargado en un data.frame que se llama iris
head(iris)
#Veamos si son normales las medidas
shapiro.test(iris$Petal.Length)
shapiro.test(iris$Petal.Length[iris$Species == "setosa"])
#Casi casi, pero no podemos rechazar que sea normal, así que podemos usar t-test de una muestra
t.test(iris$Petal.Length[iris$Species == "setosa"], mu = 1.5)
#Veamos el largo del sepalo
shapiro.test(iris$Sepal.Length[iris$Species == "setosa"])
shapiro.test(iris$Sepal.Length[iris$Species == "virginica"])
grupos <- list(iris$Sepal.Length[iris$Species == "setosa"], iris$Sepal.Length[iris$Species == "virginica"])
bartlett.test(grupos)
#Las dos varianzas no parecen ser iguales, podemos usar
t.test(iris$Sepal.Length[iris$Species == "setosa"], iris$Sepal.Length[iris$Species == "virginica"], var.equal = F)
#Las dos varianzas no parecen ser iguales, podemos usar welch (var.equal = F)
t.test(iris$Sepal.Length[iris$Species == "setosa"], iris$Sepal.Length[iris$Species == "virginica"], var.equal = F)
#d)
#Instalamos titanic para tener los datos de titanic
install.packages('titanic')
titanic::titanictrain
titanic <- titanic::titanic_train
titanic
head(titanic)
#Armemos la tabla de contingencia entre Pclass y Survived
table(titanic$Survived, titanic$Pclass)
#A simple vista, pareciera que los de tercera clase murieron mucho más en proporción que los de segunda, y los de segunda mucho más que los de primera.
#Veamos si es así.
chisq.test(titanic$Survived, titanic$Pclass)
rep(c("H", "M"), each = 12)
#e)
#Armamos los datos. De una muestra de 24 estudiantes, se tiene que hay 10 que estudian (1 hombre y 9 mujeres) y 14 que no (11 hombres y 3 mujeres)
#Hay 12 hombres y 12 mujeres
estudiantes <- data.frame(sexo = rep(c("H", "M"), each = 12),
estudia = c(F, F, F, F, F, F, F, F, F, F, F, T, F, F, F, T, T, T, T, T, T, T, T, T))
head(estudiantes)
#Armemos la tabla de contingencia
table(estudiantes$sexo, estudiantes$estudia)
#La hipótesis nula es que la proporción entre hombes y mujeres que estudian es la misma.
#Veamos si es así
chisq.test(estudiantes$sexo, estudiantes$estudia)
#Mucho se habló de la publicación (o no publicación) de los resultados de la vacuna sputnik v.
#Finalmente, los resultados se publicaron el 2 de febrero en The Lancet, en
#Safety and efficacy of an rAd26 and rAd5 vector-based heterologous prime-boost COVID-19 vaccine: an interim analysis
#of a randomised controlled phase 3 trial in Russia. Logunov et al.
#https://www.thelancet.com/journals/lancet/article/PIIS0140-6736(21)00234-8/fulltext
#En el texto nos cuentan que hicieron un ensayo doble ciego con 21977 adultos, de los cuales 16501 fueron vacunados con la sputnik y 5476 recibieron placebo.
#Luego de 21 días, de 14964 participantes vacunados, 16 contrajeron COVID-19, mientras que de 4902 del grupo placebo, 62 lo contrajeron.
#Armemos la tabla de datos
pacientes <- data.frame(tratado = c(rep(TRUE, 14964), rep(FALSE, 4902)),
infectado = c(rep(TRUE, 16), rep(FALSE, (14964-16)), rep(TRUE, 62), rep(FALSE, (4902-62))))
head(pacientes)
#Se obtuvo la siguiente tabla (llamada tabla de contingencia):
table(pacientes$tratado, pacientes$infectado)
14948+16
4840+62
chisq.test(pacientes$tratado, pacientes$infectado, correct=FALSE)
