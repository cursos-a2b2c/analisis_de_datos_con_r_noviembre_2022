nrow(nestlings)
#Cantidad de atributos
ncol(nestlings)
#Tipo de los atributos
str(nestlings)
#Nombre de los atributos
colnames(nestlings)
#Primeros 5 y últimos 5 datos
head(nestlings, n = 5)
tail(nestlings, n = 5)
#Problema 2:
control <- nestlings[nestlings$manipulation == "Control-injected", ]
IGF <- nestlings[nestlings$manipulation == "IGF-1-injected", ]
#Problema 3:
summary(control[ ,4:5])
sd(control$GPx_activity)
sd(control$sample_weight)
IQR(control$GPx_activity)
IQR(control$sample_weight)
summary(IGF[ ,4:5])
sd(IGF$GPx_activity)
sd(IGF$sample_weight)
IQR(IGF$GPx_activity)
IQR(IGF$sample_weight)
#Problema 4:
#primero hago un boxplot y un histograma para ver los datos graficamente
boxplot(control$GPx_activity, IGF$GPx_activity, ylab="GPx_activity", names=c("Control","IGF"))
hist(control$GPx_activity, col = "red", breaks = 10, xlab = "GPx_activity", main = "Histograma")
hist(IGF$GPx_activity, col = "green", add = T, breaks = 10)
legend("topleft", legend = c("CONTROL", "IGF"), col = c("red", "green"), fill = c("red", "green"))
#luego determino los datos que son extremos, que es aquel que dista 1.5 veces Del rango intercuantílico por debajo de Q1 o por encima de Q3.
#(Los muy extremos lei que son por encima de 3 del IQR pero si fuera asi no deberia eliminar ningun dato y preferi practicar como seria por eso deje 1.5)
# En este caso el box plot muestra que LOS OUTLIERS son por encima de Q3.
#Es decir, Q3 + 1.5 · IQR,
# En control seria:
3.4 + 1.5 * 1.5
#O sea todos los valores que superen 5.65 son outliers. Deberia eliminar la fila 49.
# En IGF seria:
2.3 + 1.5 * 0.5
nestlingsSinAtipicos <- nestlings[c(-49,-61), ]
controlSinAtipicos <- nestlingsSinAtipicos[nestlingsSinAtipicos$manipulation == "Control-injected", ]
IGFSinAtipicos <- nestlingsSinAtipicos[nestlingsSinAtipicos$manipulation == "IGF-1-injected", ]
# Ahora grafico sin los valores atipicos
boxplot(controlSinAtipicos$GPx_activity, IGFSinAtipicos$GPx_activity, ylab="GPx_activity", names=c("Control","IGF"))
hist(controlSinAtipicos$GPx_activity, col = "red", breaks = 10, xlab = "GPx_activity", main = "Histograma")
hist(IGFSinAtipicos$GPx_activity, col = "green", add = T, breaks = 10)
legend("topleft", legend = c("CONTROL", "IGF"), col = c("red", "green"), fill = c("red", "green"))
#Problema 5:
boxplot(controlSinAtipicos$sample_weight, IGFSinAtipicos$sample_weight, ylab="sample_weight", names=c("Control","IGF"))
boxplot(IGFSinAtipicos$sample_weight)
#luego determino los datos que son extremos, que es aquel que dista 1.5 veces Del rango intercuantílico
#por debajo de Q1 o por encima de Q3. En este caso el box plot muestra que LOS OUTLIERS son por debajo de Q1.
#Es decir, Q1 - 1.5 · IQR,
# En control seria:
10.5 - 1.5 * 5.2
#O sea todos los valores por debajo de 2.7 son outliers. Deberia eliminar la fila 27.
# En IGF seria:
10.9 - 1.5 * 2.5
nestlingsSinAtipicos2 <- nestlingsSinAtipicos[c(-27,-61), ]
controlSinAtipicos2 <- nestlingsSinAtipicos2[nestlingsSinAtipicos2$manipulation == "Control-injected", ]
IGFSinAtipicos2 <- nestlingsSinAtipicos2[nestlingsSinAtipicos2$manipulation == "IGF-1-injected", ]
# Ahora grafico sin los valores atipicos
boxplot(controlSinAtipicos2$sample_weight, IGFSinAtipicos2$sample_weight, ylab="sample_weight", names=c("Control","IGF"))
# Ahora grafico sin los valores atipicos
boxplot(controlSinAtipicos2$sample_weight, IGFSinAtipicos2$sample_weight, ylab="sample_weight", names=c("Control","IGF"))
#Problema 6:
#Para testear que cada variable sea normal
shapiro.test(controlSinAtipicos2$sample_weight)
shapiro.test(IGFSinAtipicos2$sample_weight)
#Para testear que las dos varianzas sean iguales (homogeneidad de varianzas) podemos usar el test de bartlett.
#H0: Los datos tienen igual varianza
#H1: Los datos no tienen igual varianza
bartlett.test(list(controlSinAtipicos2$sample_weight, IGFSinAtipicos2$sample_weight))
#Uso el test de welch, que testea lo mismo que un t-test pero soporta varianzas distintas
t.test(controlSinAtipicos2$sample_weight, IGFSinAtipicos2$sample_weight, var.equal = F)
#Problema 7:
plot(nestlingsSinAtipicos2$GPx_activity, nestlingsSinAtipicos2$sample_weight, xlab="GPx_activity",ylab="sample_weight")
# los datos estan bastante dispersos aunque podria llegar a verse una leve tendencia a q cuanto mas actividad de la Gpx mas peso de los polluelos.
plot(controlSinAtipicos2$GPx_activity, controlSinAtipicos2$sample_weight, xlab="GPx_activity",ylab="sample_weight", col = "red")
#Cargamos nestlings
nestlings <- read.csv("~/Downloads/datasets/nestlings.csv")
#Cantidad de datos
nrow(nestlings)
#Cantidad de atributos
ncol(nestlings)
#Tipo de los atributos
str(nestlings)
#Nombre de los atributos
colnames(nestlings)
#Primeros 5 y últimos 5 datos
head(nestlings, n = 5)
tail(nestlings, n = 5)
#Problema 2:
control <- nestlings[nestlings$manipulation == "Control-injected", ]
IGF <- nestlings[nestlings$manipulation == "IGF-1-injected", ]
#Problema 3:
summary(control[ ,4:5])
sd(control$GPx_activity)
sd(control$sample_weight)
IQR(control$GPx_activity)
IQR(control$sample_weight)
summary(IGF[ ,4:5])
sd(IGF$GPx_activity)
sd(IGF$sample_weight)
IQR(IGF$GPx_activity)
IQR(IGF$sample_weight)
#Problema 4:
#primero hago un boxplot y un histograma para ver los datos graficamente
boxplot(control$GPx_activity, IGF$GPx_activity, ylab="GPx_activity", names=c("Control","IGF"))
hist(control$GPx_activity, col = "red", breaks = 10, xlab = "GPx_activity", main = "Histograma")
hist(IGF$GPx_activity, col = "green", add = T, breaks = 10)
legend("topleft", legend = c("CONTROL", "IGF"), col = c("red", "green"), fill = c("red", "green"))
#luego determino los datos que son extremos, que es aquel que dista 1.5 veces Del rango intercuantílico por debajo de Q1 o por encima de Q3.
#(Los muy extremos lei que son por encima de 3 del IQR pero si fuera asi no deberia eliminar ningun dato y preferi practicar como seria por eso deje 1.5)
# En este caso el box plot muestra que LOS OUTLIERS son por encima de Q3.
#Es decir, Q3 + 1.5 · IQR,
# En control seria:
3.4 + 1.5 * 1.5
#O sea todos los valores que superen 5.65 son outliers. Deberia eliminar la fila 49.
# En IGF seria:
2.3 + 1.5 * 0.5
nestlingsSinAtipicos <- nestlings[c(-49,-61), ]
controlSinAtipicos <- nestlingsSinAtipicos[nestlingsSinAtipicos$manipulation == "Control-injected", ]
IGFSinAtipicos <- nestlingsSinAtipicos[nestlingsSinAtipicos$manipulation == "IGF-1-injected", ]
# Ahora grafico sin los valores atipicos
boxplot(controlSinAtipicos$GPx_activity, IGFSinAtipicos$GPx_activity, ylab="GPx_activity", names=c("Control","IGF"))
hist(controlSinAtipicos$GPx_activity, col = "red", breaks = 10, xlab = "GPx_activity", main = "Histograma")
hist(IGFSinAtipicos$GPx_activity, col = "green", add = T, breaks = 10)
legend("topleft", legend = c("CONTROL", "IGF"), col = c("red", "green"), fill = c("red", "green"))
#Problema 5:
boxplot(controlSinAtipicos$sample_weight, IGFSinAtipicos$sample_weight, ylab="sample_weight", names=c("Control","IGF"))
boxplot(IGFSinAtipicos$sample_weight)
#luego determino los datos que son extremos, que es aquel que dista 1.5 veces Del rango intercuantílico
#por debajo de Q1 o por encima de Q3. En este caso el box plot muestra que LOS OUTLIERS son por debajo de Q1.
#Es decir, Q1 - 1.5 · IQR,
# En control seria:
10.5 - 1.5 * 5.2
#O sea todos los valores por debajo de 2.7 son outliers. Deberia eliminar la fila 27.
# En IGF seria:
10.9 - 1.5 * 2.5
nestlingsSinAtipicos
nestlingsSinAtipicos2 <- nestlingsSinAtipicos[c(-27,-61), ]
controlSinAtipicos2 <- nestlingsSinAtipicos2[nestlingsSinAtipicos2$manipulation == "Control-injected", ]
IGFSinAtipicos2 <- nestlingsSinAtipicos2[nestlingsSinAtipicos2$manipulation == "IGF-1-injected", ]
# Ahora grafico sin los valores atipicos
boxplot(controlSinAtipicos2$sample_weight, IGFSinAtipicos2$sample_weight, ylab="sample_weight", names=c("Control","IGF"))
#Problema 6:
#Para testear que cada variable sea normal
shapiro.test(controlSinAtipicos2$sample_weight)
shapiro.test(IGFSinAtipicos2$sample_weight)
#Para testear que las dos varianzas sean iguales (homogeneidad de varianzas) podemos usar el test de bartlett.
#H0: Los datos tienen igual varianza
#H1: Los datos no tienen igual varianza
bartlett.test(list(controlSinAtipicos2$sample_weight, IGFSinAtipicos2$sample_weight))
#Uso el test de welch, que testea lo mismo que un t-test pero soporta varianzas distintas
t.test(controlSinAtipicos2$sample_weight, IGFSinAtipicos2$sample_weight, var.equal = F)
#Problema 7:
plot(nestlingsSinAtipicos2$GPx_activity, nestlingsSinAtipicos2$sample_weight, xlab="GPx_activity",ylab="sample_weight")
# los datos estan bastante dispersos aunque podria llegar a verse una leve tendencia a q cuanto mas actividad de la Gpx mas peso de los polluelos.
plot(controlSinAtipicos2$GPx_activity, controlSinAtipicos2$sample_weight, xlab="GPx_activity",ylab="sample_weight", col = "red")
points(IGFSinAtipicos2$GPx_activity,IGFSinAtipicos2$sample_weight, col = "green")
#Problema 8:
#R permite ajustar un modelo lineal a los datos usando un objeto de tipo "formula", que es una forma facil
#de especificar la relacion entre variables
formula_para_ajuste <- nestlingsSinAtipicos2$sample_weight ~ nestlingsSinAtipicos2$GPx_activity
formula_para_ajuste
class(formula_para_ajuste)
#Ajustemos un modelo lineal
ajuste <- lm(formula = formula_para_ajuste, data = nestlingsSinAtipicos2)
#Veamos qué devuelve el ajuste
summary(ajuste)
abline(ajuste, col="red")
#Problema 9:
load("vinos.Rdata")
#Problema 9:
load("~/Downloads/datasets/vinos.Rdata")
head(vinos)
#Problema 9:
load("~/Downloads/datasets/vinos.Rdata")
#Problema 9:
load("~/Downloads/datasets/vinos.RData")
head(vinos)
str(vinos)
vinos.pca <- prcomp(vinos, center = T, scale. = T) #Centramos y escalamos para que todas las variables esten en la misma escala y dimension
vinos.pca
plot(vinos.pca$sdev/sum(vinos.pca$sdev)*100, xlab = "# variable", ylab = "Porcentaje de variabilidad explicada", type="b")
plot(vinos.pca$x[, 1:2], main = "Vinos") #Pareciera haber 3 o 4 grupos
#Problema 10:
plot(vinos.pca$x[, 1:2], main = "Vinos")
text(PC1 ~PC2, labels=rownames(vinos.pca$x),data=vinos.pca$x, cex=0.9, font=2)
text(PC3 ~PC4, labels=rownames(vinos.pca$x),data=vinos.pca$x, cex=0.9, font=2)
#Problema 10:
plot(vinos.pca$x[, 1:2], main = "Vinos")
text(PC1 ~PC2, labels=rownames(vinos.pca$x),data=vinos.pca$x, cex=0.9, font=2)
rownames(vinos.pca$x)
vinos.pca
vinos.pca$x
#Problema 10:
plot(vinos.pca$x[, 1:2], main = "Vinos")
text(PC2 ~ PC1, labels=rownames(vinos.pca$x),data=vinos.pca$x, cex=0.9, font=2)
#Hacemos kmeans pero primero reescalamos
vinos_escalado <- as.data.frame(scale(vinos, center = T, scale = T))
library(cluster)
set.seed(1234567)
sse <- c()
clusters <- kmeans(vinos_escalado, centers = 2)
sse      <- c(sse, sum(clusters$withinss))
clusters <- kmeans(vinos_escalado, centers = 3)
sse      <- c(sse, sum(clusters$withinss))
clusters <- kmeans(vinos_escalado, centers = 4)
sse      <- c(sse, sum(clusters$withinss))
clusters <- kmeans(vinos_escalado, centers = 5)
sse      <- c(sse, sum(clusters$withinss))
clusters <- kmeans(vinos_escalado, centers = 6)
sse      <- c(sse, sum(clusters$withinss))
plot(2:6, sse, type = "b", xlab = "k") #Criterio del codo
#Me quedo con 3 grupos
clusters <- kmeans(vinos_escalado, centers = 3)
#Graficamos
plot(vinos.pca$x[, 1:2], main = "vinos", col = clusters$cluster)
#Grafico un silhouette
set.seed(1234567)
clusters <- kmeans(vinos_escalado, centers = 3)
plot(silhouette(clusters$cluster, dist(vinos_escalado)))
clusters <- kmeans(vinos_escalado, centers = 2)
plot(silhouette(clusters$cluster, dist(vinos_escalado)))
setwd("~/trabajo/cursos/analisis_de_datos_con_r_noviembre_2022/evaluacion/") #Elegimos el directorio de trabajo
nestlings <-  read.csv("nestlings.csv") #Leemos el dataset
class(nestlings) #Tipo de objeto
nrow(nestlings) #Cantidad de filas u observaciones del dataset
ncol(nestlings) #Cantidad de columnas o atributos
str(nestlings) #Visualizamos la estructura del dataset
colnames(nestlings) #Los nombres de los atributos
View(nestlings) #Lo abrimos tipo excel para darle una mirada general rápida
#Problema 2: Calcular cuántas observaciones hay de Control y cuántas de IGF.¿Los datos están
#balanceados (cantidades similares de observaciones de ambos tipos)?
table(nestlings$manipulation) #Usamos table para contar cuantos elementos hay de Control-injected y cuantos de IGF-1-injected. Toda esa información está en manipulation
#Problema 3: Calcular media, mediana, desvío estándar y distancia inter cuartil para GPx_activity
#y sample_weight. Realizar esta descripción para cada tratamiento por separado.
#¿Las medidas de centralidad son similares para cada tratamiento y para cada atributo? ¿Y las de
#dispersión?
GPx_activityControlInjected <- nestlings$GPx_activity[nestlings$manipulation=="Control-injected"]#Podemos subsetear y guardar en una nueva variable
GPx_activityIGF1injected    <- nestlings$GPx_activity[nestlings$manipulation=="IGF-1-injected"]#Podemos subsetear y guardar en una nueva variable
mean(GPx_activityControlInjected) #Calculamos media
mean(GPx_activityIGF1injected) #Calculamos media
median(GPx_activityControlInjected) #Calculamos mediana
median(GPx_activityIGF1injected) #Calculamos mediana
sd(GPx_activityControlInjected) #Calculamos desvío estándar
sd(GPx_activityIGF1injected) #Calculamos desvío estándar
IQR(GPx_activityControlInjected) #Distancia intercuartil
IQR(GPx_activityIGF1injected) #Distancia intercuartil
summary(GPx_activityControlInjected) #Un resumen rápido de todo
summary(GPx_activityIGF1injected) #Un resumen rápido de todo
#Veamos sample_weight
mean(sample_weightControlInjected) #Calculamos media
mean(sample_weightIGF1injected) #Calculamos media
#Veamos sample_weight
sample_weightControlInjected <- nestlings$sample_weight[nestlings$manipulation=="Control-injected"]#Podemos subsetear y guardar en una nueva variable
sample_weightIGF1injected    <- nestlings$sample_weight[nestlings$manipulation=="IGF-1-injected"]#Podemos subsetear y guardar en una nueva variable
mean(sample_weightControlInjected) #Calculamos media
mean(sample_weightIGF1injected) #Calculamos media
median(sample_weightControlInjected) #Calculamos mediana
median(sample_weightIGF1injected) #Calculamos mediana
sd(sample_weightControlInjected) #Calculamos desvío estándar
sd(sample_weightIGF1injected) #Calculamos desvío estándar
IQR(sample_weightControlInjected) #Distancia intercuartil
IQR(sample_weightIGF1injected) #Distancia intercuartil
summary(sample_weightControlInjected) #Un resumen rápido de todo
summary(sample_weightIGF1injected) #Un resumen rápido de todo
#Problema 4: Realizar un boxplot y un histograma de GPx_activity para cada tratamiento. ¿Existen datos atípicos?
#En caso de existir, retirar esas observaciones y mostrar el criterio utilizado para decidirlo.
#(Ayuda: no hay que retirar solamente el valor de GPx_activity, hay que retirar toda la fila del valor atípico)
#Por ejemplo, supongamos que la observación 100 tiene un GPx_activity atípico, entonces:
#nestlingsSinAtipicos <- nestlings[-100, ] #Es decir, sacamos toda la fila.
#Bonus crack de R: Realizar esos 4 gráficos en un mismo layout, con el boxplot en forma horizontal por debajo
#del histograma correspondiente a cada tratamiento.
#A partir de acá, seguir trabajando con el nuevo dataframe con los datos atípicos removidos.
matriz_layout <- matrix(1:4, nrow=2, ncol=2, byrow = F) #Armamos el layout
#Problema 4: Realizar un boxplot y un histograma de GPx_activity para cada tratamiento.
#Retirar los datos que son muy extremos (decidan ustedes qué consideran muy extremos)
#(Ayuda: no hay que retirar solamente el valor de GPx_activity, hay que retirar toda la fila del valor atípico)
#Por ejemplo, supongamos que la observación 100 tiene un GPx_activity atípico, entonces:
#nestlingsSinAtipicos <- nestlings[-100, ] #Es decir, sacamos toda la fila.
#A partir de acá, seguir trabajando con el nuevo dataframe con los datos atípicos removidos.
matriz_layout <- matrix(1:4, nrow=2, ncol=2, byrow = F) #Armamos el layout
layout(matriz_layout)
#Usamos las variables que ya habíamos definido antes para graficar, pero para sacar los valores atípicos, vamos a querer hacerlo en el dataframe completo
hist(GPx_activityControlInjected, main = "GPx Control", breaks = 10) #Le ponemos 10 breaks para visualizar mejor la distribución
boxplot(GPx_activityControlInjected, horizontal = T)
hist(GPx_activityIGF1injected, main = "GPx Tratamiento", breaks = 10)
boxplot(GPx_activityIGF1injected, horizontal = T)
#Tratamiento no parece muy normal. ¿Será significativamente no normal? ¿Cómo podríamos saberlo?
layout(1) #Volvemos al layout original
#Saquemos outliers con el criterio de IQR
iqr    <- IQR(GPx_activityControlInjected)
minimo <- quantile(GPx_activityControlInjected, 0.25) - 1.5*iqr #Calculamos el mínimo para control injected que consideramos no outlier
maximo <- quantile(GPx_activityControlInjected, 0.75) + 1.5*iqr #Calculamos el máximo para control injected que consideramos no outlier
minimo
maximo
#Pedimos en simultaneo que sean control injected y la actividad sea menor al mínimo o mayor al máximo. Eso cubre todo. Lo hacemos en el original y guardamos
#La fila correspondiente.
a_remover <- which(nestlings$manipulation == "Control-injected" & (nestlings$GPx_activity < minimo | nestlings$GPx_activity > maximo))
a_remover
#Saquemos outliers con el criterio de IQR
iqr    <- IQR(GPx_activityIGF1injected)
minimo <- quantile(GPx_activityIGF1injected, 0.25) - 1.5*iqr #Calculamos el mínimo para control injected que consideramos no outlier
maximo <- quantile(GPx_activityIGF1injected, 0.75) + 1.5*iqr #Calculamos el máximo para control injected que consideramos no outlier
#Pedimos en simultaneo que sean IGF injected y la actividad sea menor al mínimo o mayor al máximo. Eso cubre todo. Lo hacemos en el original.
#Se lo agregamos a los que ya queríamos remover
a_remover <- c(a_remover, which(nestlings$manipulation == "IGF-1-injected" & (nestlings$GPx_activity < minimo | nestlings$GPx_activity > maximo)))
a_remover
a_remover
#Listo, tenemos todas las filas que queremos remover, las sacamos
nestlingsSinOutliers <- nestlings[-a_remover, ]
#Tenemos que trabajar con el dataset sin outliers de GPx
boxplot(nestlingsSinOutliers$sample_weight ~ nestlingsSinOutliers$manipulation)
#Pareciera haber outliers en control
#Saquemos outliers con el criterio de IQR
sample_weightControlInjected <- nestlingsSinOutliers$sample_weight[nestlingsSinOutliers$manipulation == "Control-injected"]
iqr    <- IQR(sample_weightControlInjected)
minimo <- quantile(sample_weightControlInjected, 0.25) - 1.5*iqr #Calculamos el mínimo para control injected que consideramos no outlier
maximo <- quantile(sample_weightControlInjected, 0.75) + 1.5*iqr #Calculamos el máximo para control injected que consideramos no outlier
#Pedimos en simultaneo que sean IGF injected y la actividad sea menor al mínimo o mayor al máximo. Eso cubre todo. Lo hacemos en el original.
#Se lo agregamos a los que ya queríamos remover
a_remover <- which(nestlingsSinOutliers$manipulation == "Control-injected" & (nestlingsSinOutliers$sample_weight < minimo | nestlingsSinOutliers$sample_weight > maximo))
a_remover
#Los sacamos
nestlingsSinOutliers <- nestlingsSinOutliers[-a_remover, ]
#Hacemos los tests de homocedasticidad, normalidad y t
total <-list(nestlingsSinOutliers$sample_weight[nestlingsSinOutliers$manipulation=="Control-injected"], nestlingsSinOutliers$sample_weight[nestlingsSinOutliers$manipulation=="IGF-1-injected"])
bartlett.test(total)
#Rechazamos homocedasticidad por pvalue < 0.05
#normalidad de cada variable
#Test de Shapiro
shapiro.test(nestlingsSinOutliers$sample_weight[nestlingsSinOutliers$manipulation=="Control-injected"])
shapiro.test(nestlingsSinOutliers$sample_weight[nestlingsSinOutliers$manipulation=="IGF-1-injected"])
# No rechazamos normalidad
# t test pero hay que especificar que las dos varianzas son distintas
t.test(nestlingsSinOutliers$sample_weight[nestlingsSinOutliers$manipulation=="Control-injected"], nestlingsSinOutliers$sample_weight[nestlingsSinOutliers$manipulation=="IGF-1-injected"], var.equal = FALSE)
#Problema 7: Realizar un scatter plot entre GPx activity y sample weight ¿Puede observar algún tipo de relación entre estas dos variables?
plot(nestlingsSinOutliers$GPx_activity, nestlingsSinOutliers$sample_weight)
#Problema 8: Realizar un ajuste lineal entre GPx activity y sample weight y graficarlo.
#Ayuda: funcion lm
ajuste <- lm(sample_weight ~ GPx_activity, nestlingsSinOutliers) #Ajustemos
plot(nestlingsSinOutliers$GPx_activity, nestlingsSinOutliers$sample_weight)
abline(ajuste, col = "red")
summary(ajuste) #Veamos cómo da
#Agreguemos otra variable y después la interacción
ajuste <- lm(sample_weight ~ GPx_activity + manipulation, nestlingsSinOutliers) #Ajustemos
summary(ajuste) #Veamos cómo da
ajuste <- lm(sample_weight ~ GPx_activity*manipulation, nestlingsSinOutliers) #Ajustemos con interacción
summary(ajuste) #Veamos cómo da
#Problema 9: Cargar el dataset vinos.RData.
#El mismo consiste en los resultados del analisis quimico de vinos cultivados en la misma region de Italia pero en tres cultivares diferentes.
#Realizar un PCA y graficarlo. ¿Cuánta variabilidad explican las primeras 2 componentes? ¿Será una buena representación del dataset un gráfico 2d con estas primeras dos componentes?
(load("vinos.RData")) #Los corchetes externos hacen que al cargar el RData, R nos muestre el nombre de todas las variables contenidas
#Veamoslo un poco
View(vinos)
#Hacemos el pca. Recordar de estandarizar usando scale. y center como TRUE
pca_vinos <- prcomp(vinos, scale. = T, center = T)
pca_vinos
summary(pca_vinos)
pca_vinos$sdev
plot(pca_vinos)
biplot(pca_vinos)
pca_vinos$sdev**2
plot(pca_vinos$sdev**2)
plot(pca_vinos$x[, 1:2])
vinos
#Problema 10: #Cual es el vino más cercano al 121? Y al 137?
#Clusterizar con kmeans. Elegir un k con el criterio del codo.
#Realizar un silohuette y decidir si todos los datos quedaron agrupados en grupos compactos.
#Graficar el PCA coloreando por clusters.
text(x = pca_vinos$x[, 1], y = pca_vinos$x[, 2], labels = rownames(vinos))
#Ponemos los numeritos de cada vino en el boxplot y nos fijamos a ojo en el gráfico. Podríamos haber hecho alguna otra cosa más sofisticada
#como una matriz de distancias pero con esto alcanzaba
plot(pca_vinos$x[, 1:2], type = "n")
text(x = pca_vinos$x[, 1], y = pca_vinos$x[, 2], labels = rownames(vinos)) #El más cercano al 121 parece ser el 16 y al 137 parece ser el 100.
plot(pca_vinos$x[, 1:2])
#Ponemos los numeritos de cada vino en el boxplot y nos fijamos a ojo en el gráfico. Podríamos haber hecho alguna otra cosa más sofisticada
#como una matriz de distancias pero con esto alcanzaba
#plot(pca_vinos$x[, 1:2], type = "n")
text(x = pca_vinos$x[, 1], y = pca_vinos$x[, 2], labels = rownames(vinos)) #El más cercano al 121 parece ser el 16 y al 137 parece ser el 155.
#si hubieramos querido hacer distancias
dist(pca_vinos$x)
#si hubieramos querido hacer distancias
d <- dist(pca_vinos$x)
d["121", ]
matrix(d)["121", ]
d
data.frame(d)
t.data.frame(d)
to.data.frame(d)
t.data.frame(d)
to.data.frame(d)
d
d[, 121]
d[, 2]
#si hubieramos querido hacer distancias
d <- matrix(dist(pca_vinos$x))
d
dim(d)
#si hubieramos querido hacer distancias
d <- as.matrix(dist(pca_vinos$x))
d
d[121, ]
d["121", ]
which.min(d["121", ])
sort(d["121", ])
#si hubieramos querido hacer distancias, usamos la función dist, transformamos a matrix y subseteamos
d <- as.matrix(dist(pca_vinos$x[, 1:2]))
d["121", ]
sort(d["121", ])
#si hubieramos querido hacer distancias, usamos la función dist, transformamos a matrix y subseteamos
d <- as.matrix(dist(pca_vinos$x[, 1:2])) #si usamos solo las primeras componentes
sort(d["121", ]) #Ordenamos de menor a mayor, el más chico es él mismo, necesitamos el segundo más chico
#Veamos qué pasa si usamos el dataset completo
d <- as.matrix(dist(pca_vinos$x))
sort(d["121", ]) #Ordenamos de menor a mayor, el más chico es él mismo, necesitamos el segundo más chico, que efectivamente es el 16
#Veamos qué pasa si usamos el dataset completo original (pero estandarizado)
vinos_estandarizados <- scale(vinos)
vinos_estandarizados
d <- as.matrix(dist(vinos_estandarizados))
d
sort(d["121", ]) #Ordenamos de menor a mayor, el más chico es él mismo, necesitamos el segundo más chico, que es el 25. Usar menos componentes efectivamente nos hace perder información!
#Veamos qué pasa si usamos el dataset completo del pca
d <- as.matrix(dist(pca_vinos$x))
sort(d["121", ]) #Ordenamos de menor a mayor, el más chico es él mismo, necesitamos el segundo más chico, que es el 25. Usar menos componentes efectivamente nos hace perder información!
#Veamos qué pasa si usamos el dataset completo original (pero estandarizado)
vinos_estandarizados <- scale(vinos)
d_original <- as.matrix(dist(vinos_estandarizados))
sort(d_original["121", ]) #Ordenamos de menor a mayor, el más chico es él mismo, necesitamos el segundo más chico, que es el 25. Usar menos componentes efectivamente nos hace perder información!
#Comparemos las dos distancias calculadas a partir de pca y original. Esperan que sean distintas o iguales?
d == d_original
#Comparemos las dos distancias calculadas a partir de pca y original. Esperan que sean distintas o iguales?
table(d == d_original)
d
d[1, ]
d_original[1, ]
d_original[2, ]
d[2, ]
which(d != d_original, arr.ind = )
which(d != d_original, arr.ind = T)
d[2, 1]
d_original[2, 1]
#Comparemos las dos distancias calculadas a partir de pca y original. Esperan que sean distintas o iguales?
all.equal(d, d_original)
k <- 2
kmeans(vinos_estandarizados, k = k)
kmeans
kmeans(x = vinos_estandarizados, centers = k)
summary(kmeans(x = vinos_estandarizados, centers = k))
a<-kmeans(x = vinos_estandarizados, centers = k)
kmeans(x = vinos_estandarizados, centers = k)$withinss
sum(a$withinss)
sum(a$tot.withinss)
kmeans(x = vinos_estandarizados, centers = k)$tot.withinss
#Usamos el criterio del codo con hasta 10 clusters
sse <- c()
for(k in 2:10){
sse <- c(sse, kmeans(x = vinos_estandarizados, centers = k)$tot.withinss)
}
#Usamos el criterio del codo con hasta 10 clusters
sse <- c()
for(k in 2:10){
set.seed(1234567)
sse <- c(sse, kmeans(x = vinos_estandarizados, centers = k)$tot.withinss)
}
#Usamos el criterio del codo con hasta 10 clusters
sse <- c()
for(k in 2:10){
set.seed(1234567) #Por qué pongo la semilla adentro del for?
sse <- c(sse, kmeans(x = vinos_estandarizados, centers = k)$tot.withinss)
}
plot(2:10, sse)
#Usamos el criterio del codo con hasta 10 clusters
sse <- c()
for(k in 2:10){
set.seed(1234567) #Por qué pongo la semilla adentro del for?
sse <- c(sse, kmeans(x = vinos_estandarizados, centers = k)$tot.withinss) #Lo hago con el original estandarizado.
}
plot(2:10, sse)
clus <- kmeans(x = vinos_estandarizados, centers = 4)
clus
clusters <- kmeans(x = vinos_estandarizados, centers = 4)
plot(silhouette(clusters$cluster, dist(vinos_estandarizados)))
#Hacemos el cluster con k = 4 y graficamos el silhouette.
library(cluster)
set.seed(1234567) #Por qué pongo la semilla adentro del for?
clusters <- kmeans(x = vinos_estandarizados, centers = 4)
plot(silhouette(clusters$cluster, dist(vinos_estandarizados)))
#Graficamos el scatter. Para eso usamos el pca
plot(pca_vinos$x[, 1:2])
#Graficamos el scatter. Para eso usamos el pca
plot(pca_vinos$x[, 1:2], col = clusters$cluster)
plot(1:10, sse) #Veamos el codo
sse
#Graficamos el scatter. Para eso usamos el pca
plot(pca_vinos$x[, 1:2], col = clusters$cluster)
#Hacemos el cluster con k = 3 y graficamos el silhouette.
set.seed(1234567) #Por qué pongo la semilla adentro del for?
clusters <- kmeans(x = vinos_estandarizados, centers = 3)
plot(silhouette(clusters$cluster, dist(vinos_estandarizados))) #Los clusters más grandes quedaron compactos. El cluster mas chico tiene un par de observaciones no muy compactas, habría que ver qué son
#Graficamos el scatter. Para eso usamos el pca
plot(pca_vinos$x[, 1:2], col = clusters$cluster) #Ahí se ven las observaciones que quedaban mal agrupadas. Probemos con 3
#Graficamos el scatter. Para eso usamos el pca
plot(pca_vinos$x[, 1:2], col = clusters$cluster) #Ahí se ven las observaciones que quedaban mal agrupadas. Podríamos analizarlas por separado despues
set.seed(1234567) #Por qué pongo la semilla adentro del for?
clusters <- kmeans(x = vinos_estandarizados, centers = 4)
plot(silhouette(clusters$cluster, dist(vinos_estandarizados))) #Los clusters más grandes quedaron compactos. El cluster mas chico tiene un par de observaciones no muy compactas, habría que ver qué son
#Graficamos el scatter. Para eso usamos el pca
plot(pca_vinos$x[, 1:2], col = clusters$cluster) #Ahí se ven las observaciones que quedaban mal agrupadas. Podríamos analizarlas por separado despues
